proxy-providers:
  Airport_01:
    type: http
    interval: 1800
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 🟢 直连
    url: "https://cherryvpn.net/link/BVojdeBxzJ8Yauiv78912788?sub=2"
  Airport_02:
    type: http
    interval: 1800
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 🟢 直连
    url: "https://app.mitce.com/?sid=150643&token=2532d78912788f2b0c88"


unified-delay: true
tcp-concurrent: true
global-client-fingerprint: chrome
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  skip-domain:
    - "Mijia Cloud"
    - "dlg.io.mi.com"
    - "+.push.apple.com"
    - "+.apple.com"

proxies:
- name: "🟢 直连"
  type: direct
  udp: true

pr: &pr {type: select, proxies: [🚀 节点选择, ♻️ 自动选择, ⚖️ 负载均衡, 🍒 狮城IEPL, 🍒 日本IEPL, 🍒 台湾IEPL, 🍒 美国IEPL, 🛰️ 狮城HY2, 🛰️ 日本HY2, 🍒 台湾IEPL, 🛰️ 美国HY2, 🌐 全部节点, 🟢 直连]}

proxy-groups:
  - {name: 🚀 节点选择, type: select, proxies: [♻️ 自动选择, ⚖️ 负载均衡, 🍒 狮城IEPL, 🍒 日本IEPL, 🍒 台湾IEPL, 🍒 美国IEPL, 🛰️ 狮城HY2, 🛰️ 日本HY2, 🍒 台湾IEPL, 🛰️ 美国HY2, 🌐 全部节点, 🟢 直连]}
  - {name: 📹 YouTube, <<: *pr}
  - {name: 🍀 Google, <<: *pr}
  - {name: 🤖 ChatGPT, <<: *pr}
  - {name: 👨🏿‍💻 GitHub, <<: *pr}
  - {name: 💾 OneDrive, <<: *pr}
  - {name: Ⓜ️ Microsoft, <<: *pr}
  - {name: 🎵 TikTok, <<: *pr}
  - {name: 📲 Telegram, <<: *pr}
  - {name: 🎥 NETFLIX, type: select, proxies: [ 🚀 节点选择,🎥 奈飞节点]}
  - {name: ✈️ Speedtest, <<: *pr}
  - {name: 💶 PayPal, <<: *pr}
  - {name: 🍎 Apple, type: select, proxies: [🟢 直连, 🚀 节点选择]}
  - {name: 🎯 全球直连, type: select, proxies: [🟢 直连, 🚀 节点选择]}
  - {name: 🐟 漏网之鱼, <<: *pr}
  - {name: ⚖️ 负载均衡, type: select, proxies: [🦁️ 狮城HY2, 👹️ 日本HY2, 🍓 台湾HY2, 🦅 美国HY2]}
  - {name: 🎥 奈飞节点, type: select, include-all: true, filter: "(?i)NF|奈飞|解锁|Netflix|NETFLIX|Media"}
  - {name: 🦁️ 狮城HY2, type: load-balance, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(SG1-HY2|SG2-HY2|SG3-HY2|SG4-HY2|SG5-HY2|(?i)Singapore))^((?!(企业|游戏|剩余|流量)).)*$"}
  - {name: 👹️ 日本HY2, type: load-balance, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(JP1-HY2|JP2-HY2|JP3-HY2|JP4-HY2|JP5-HY2|(?i)Japan))^((?!(企业|游戏|剩余|流量)).)*$"}
  - {name: 🍓 台湾HY2, type: load-balance, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(TW1-HY2|TW2-HY2|TW3-HY2|TW4-HY2|TW5-HY2|(?i)Taiwan))^((?!(企业|游戏|剩余|流量)).)*$"}
  - {name: 🦅 美国HY2, type: load-balance, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(US1-HY2|US2-HY2|US3-HY2|US4-HY2|US5-HY2|(?i)United States))^((?!(企业|游戏|剩余|流量)).)*$"}
  - {name: 🍒 狮城IEPL, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(新加坡|狮城|(?i)Singapore))^((?!(GPT|中继|专用|企业)).)*$"}
  - {name: 🍒 日本IEPL, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(日本|川日|东京|大阪|(?i)Japan))^((?!(GPT|中继|专用|企业)).)*$"}
  - {name: 🍒 台湾IEPL, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(台|新北|彰化|(?i)Taiwan))^((?!(GPT|中继|专用|企业)).)*$"}
  - {name: 🍒 美国IEPL, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(美国|芝加哥|(?i)United States))^((?!(GPT|中继|专用|企业)).)*$"}
  - {name: 🛰️ 狮城HY2, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(SG1-HY2|SG2-HY2|SG3-HY2|SG4-HY2|SG5-HY2|(?i)Singapore))^((?!(企业|游戏|剩余|流量)).)*$"}
  - {name: 🛰️ 日本HY2, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(JP1-HY2|JP2-HY2|JP3-HY2|JP4-HY2|JP5-HY2|(?i)Japan))^((?!(企业|游戏|剩余|流量)).)*$"}
  - {name: 🛰️ 台湾HY2, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(TW1-HY2|TW2-HY2|TW3-HY2|TW4-HY2|TW5-HY2|(?i)Taiwan))^((?!(企业|游戏|剩余|流量)).)*$"}
  - {name: 🛰️ 美国HY2, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(US1-HY2|US2-HY2|US3-HY2|US4-HY2|US5-HY2|(?i)United States))^((?!(企业|游戏|剩余|流量)).)*$"}  
  - {name: ♻️ 自动选择, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^((?!(直连)).)*$"}
  - {name: 🌐 全部节点, type: select, include-all: true}  
rules:
  - RULE-SET,private_domain,🟢 直连
  - RULE-SET,direct1,🟢 直连
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,proxylite,🚀 节点选择
  - RULE-SET,ai,🤖 ChatGPT
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,onedrive_domain,💾 OneDrive
  - RULE-SET,microsoft_domain,Ⓜ️ Microsoft
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,paypal_domain,💶 PayPal
  - RULE-SET,geolocation-!cn,🚀 节点选择
  - RULE-SET,cn_domain,🎯 全球直连
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,cn_ip,🎯 全球直连
  - MATCH,🐟 漏网之鱼
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  qcy: &qcy {type: http, interval: 86400, behavior: domain, format: text}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
rule-providers: 
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs" }
  direct1: { <<: *class, url: "https://raw.githubusercontent.com/dblist/note/main/Direct.list" }
  proxylite: { <<: *class, url: "https://raw.githubusercontent.com/dblist/note/main/ProxyLite.list" }
  ai: { <<: *class, url: "https://raw.githubusercontent.com/dblist/note/main/AI.list" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs" }
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs" }
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs" }
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs" }
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs" }
  paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs" }
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs" }
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs" }
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs" }
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs" }
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs" }
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs" }
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs" }
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs" }
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs" }
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs" }
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs" }
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs" }
